from flask import Flask, render_template, request, jsonify
from datetime import datetime
import json
import re

app = Flask(__name__)

# Armazenar conversas em mem√≥ria (em produ√ß√£o, usar banco de dados)
conversations = {}

# Base de conhecimento sobre servi√ßos do terminal
SERVICOS_TERMINAL = {
    "transporte": {
        "titulo": "üöå Transporte Rodovi√°rio",
        "descricao": "Oferecemos passagens para diversas cidades com m√∫ltiplas empresas parceiras",
        "detalhes": [
            "‚Ä¢ √înibus executivo, convencional e leito",
            "‚Ä¢ Destinos nacionais e internacionais",
            "‚Ä¢ Hor√°rios flex√≠veis ao longo do dia",
            "‚Ä¢ Pre√ßos competitivos"
        ]
    },
    "encomendas": {
        "titulo": "üì¶ Envio de Encomendas",
        "descricao": "Servi√ßo de envio e recebimento de pacotes",
        "detalhes": [
            "‚Ä¢ Envio para todo o Brasil",
            "‚Ä¢ Rastreamento em tempo real",
            "‚Ä¢ Seguro opcional",
            "‚Ä¢ Entrega expressa dispon√≠vel"
        ]
    },
    "guarda_volumes": {
        "titulo": "üéí Guarda-Volumes",
        "descricao": "Armazenamento seguro de bagagens",
        "detalhes": [
            "‚Ä¢ Arm√°rios de diversos tamanhos",
            "‚Ä¢ Sistema de seguran√ßa 24h",
            "‚Ä¢ Pre√ßos por hora ou di√°ria",
            "‚Ä¢ Acesso facilitado"
        ]
    },
    "alimentacao": {
        "titulo": "üçΩÔ∏è Pra√ßa de Alimenta√ß√£o",
        "descricao": "Diversas op√ß√µes gastron√¥micas",
        "detalhes": [
            "‚Ä¢ Restaurantes e lanchonetes",
            "‚Ä¢ Cafeterias",
            "‚Ä¢ Lojas de conveni√™ncia",
            "‚Ä¢ Op√ß√µes vegetarianas/veganas"
        ]
    },
    "servicos_gerais": {
        "titulo": "üè¢ Servi√ßos Gerais",
        "descricao": "Outros servi√ßos dispon√≠veis no terminal",
        "detalhes": [
            "‚Ä¢ Caixas eletr√¥nicos 24h",
            "‚Ä¢ Farm√°cia",
            "‚Ä¢ Banheiros e frald√°rio",
            "‚Ä¢ Wi-Fi gratuito",
            "‚Ä¢ Carregadores de celular",
            "‚Ä¢ Informa√ß√µes tur√≠sticas"
        ]
    }
}

HORARIOS_FUNCIONAMENTO = {
    "terminal": "24 horas por dia, 7 dias por semana",
    "bilheteria": "Das 5h √†s 23h",
    "guarda_volumes": "Das 6h √†s 22h",
    "praca_alimentacao": "Das 6h √†s 23h",
    "informacoes": "Das 6h √†s 22h"
}

class ChatBot:
    def __init__(self):
        self.contexto = {}
        
    def detectar_intencao(self, mensagem):
        """Detecta a inten√ß√£o do usu√°rio baseado na mensagem"""
        msg_lower = mensagem.lower()
        
        # Palavras-chave para diferentes inten√ß√µes
        servicos_keywords = ['servi√ßo', 'servico', 'oferec', 'tem', 'dispon√≠vel', 'disponivel', 
                           'fazem', 'faz', 'terminal', 'rodovi√°ria', 'rodoviaria', 'o que']
        
        passagem_keywords = ['passagem', '√¥nibus', 'onibus', 'viagem', 'viajar', 'destino', 
                           'hor√°rio', 'horario', 'linha', 'empresa', 'comprar']
        
        encomenda_keywords = ['encomenda', 'pacote', 'enviar', 'envio', 'entregar', 'entrega',
                            'receber', 'carga', 'mercadoria']
        
        guarda_volumes_keywords = ['guarda', 'volume', 'bagagem', 'mala', 'mochila', 'guardar',
                                  'deixar', 'arm√°rio', 'armario']
        
        alimentacao_keywords = ['comer', 'comida', 'lanche', 'restaurante', 'caf√©', 'cafe',
                              'almo√ßo', 'almoco', 'jantar', 'beber']
        
        horario_keywords = ['hor√°rio', 'horario', 'hora', 'quando', 'abre', 'fecha', 
                          'funcionamento', 'funciona']
        
        contato_keywords = ['contato', 'telefone', 'email', 'falar', 'atendente', 'ajuda',
                          'suporte', 'reclamar', 'reclama√ß√£o']
        
        # Verificar inten√ß√µes
        if any(kw in msg_lower for kw in servicos_keywords):
            return 'servicos_geral'
        elif any(kw in msg_lower for kw in passagem_keywords):
            return 'passagem'
        elif any(kw in msg_lower for kw in encomenda_keywords):
            return 'encomenda'
        elif any(kw in msg_lower for kw in guarda_volumes_keywords):
            return 'guarda_volumes'
        elif any(kw in msg_lower for kw in alimentacao_keywords):
            return 'alimentacao'
        elif any(kw in msg_lower for kw in horario_keywords):
            return 'horario'
        elif any(kw in msg_lower for kw in contato_keywords):
            return 'contato'
        else:
            return 'outro'
    
    def extrair_dados_pessoais(self, mensagem):
        """Extrai dados pessoais da mensagem se houver"""
        dados = {}
        
        # Detectar email
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        email_match = re.search(email_pattern, mensagem)
        if email_match:
            dados['email'] = email_match.group()
        
        # Detectar telefone (formato brasileiro)
        telefone_pattern = r'(?:\+55\s?)?(?:\(?\d{2}\)?\s?)?(?:9\s?)?\d{4}[-.\s]?\d{4}'
        telefone_match = re.search(telefone_pattern, mensagem)
        if telefone_match:
            dados['telefone'] = telefone_match.group()
        
        return dados
    
    def gerar_resposta_servicos(self):
        """Gera uma resposta completa sobre os servi√ßos do terminal"""
        resposta = "üè¢ **Bem-vindo ao Terminal Rodovi√°rio!**\n\n"
        resposta += "Aqui est√£o nossos principais servi√ßos:\n\n"
        
        for key, servico in SERVICOS_TERMINAL.items():
            resposta += f"{servico['titulo']}\n"
            resposta += f"{servico['descricao']}\n"
            for detalhe in servico['detalhes']:
                resposta += f"{detalhe}\n"
            resposta += "\n"
        
        resposta += "üìç **Hor√°rios de Funcionamento:**\n"
        for local, horario in HORARIOS_FUNCIONAMENTO.items():
            resposta += f"‚Ä¢ {local.replace('_', ' ').title()}: {horario}\n"
        
        resposta += "\nüí¨ Posso ajudar com algo espec√≠fico? Digite:\n"
        resposta += "‚Ä¢ 'passagem' para informa√ß√µes sobre viagens\n"
        resposta += "‚Ä¢ 'encomenda' para envio de pacotes\n"
        resposta += "‚Ä¢ 'guarda volumes' para guardar bagagens\n"
        resposta += "‚Ä¢ 'alimenta√ß√£o' para op√ß√µes de comida\n"
        resposta += "‚Ä¢ 'contato' para falar com um atendente"
        
        return resposta
    
    def gerar_resposta_passagem(self):
        """Gera resposta sobre passagens"""
        resposta = "üöå **Informa√ß√µes sobre Passagens**\n\n"
        resposta += "Trabalhamos com as principais empresas:\n"
        resposta += "‚Ä¢ Via√ß√£o Cometa\n"
        resposta += "‚Ä¢ Via√ß√£o Itapemirim\n"
        resposta += "‚Ä¢ Expresso do Sul\n"
        resposta += "‚Ä¢ √Åguia Branca\n\n"
        resposta += "**Como comprar:**\n"
        resposta += "1. Direto no guich√™ (5h √†s 23h)\n"
        resposta += "2. Pelo nosso site (24h)\n"
        resposta += "3. Pelo telefone: (11) 3333-4444\n\n"
        resposta += "Para consultar hor√°rios e pre√ßos, preciso saber:\n"
        resposta += "‚Ä¢ Cidade de destino\n"
        resposta += "‚Ä¢ Data da viagem\n\n"
        resposta += "Qual destino voc√™ procura?"
        
        return resposta
    
    def gerar_resposta_encomenda(self):
        """Gera resposta sobre encomendas"""
        resposta = "üì¶ **Servi√ßo de Encomendas**\n\n"
        resposta += "**Para enviar:**\n"
        resposta += "‚Ä¢ Traga o pacote embalado\n"
        resposta += "‚Ä¢ Documento com foto\n"
        resposta += "‚Ä¢ Dados do destinat√°rio\n\n"
        resposta += "**Tarifas:**\n"
        resposta += "‚Ä¢ At√© 5kg: R$ 25,00\n"
        resposta += "‚Ä¢ 5-10kg: R$ 40,00\n"
        resposta += "‚Ä¢ 10-20kg: R$ 60,00\n"
        resposta += "‚Ä¢ Acima de 20kg: consultar\n\n"
        resposta += "**Prazo de entrega:**\n"
        resposta += "‚Ä¢ Capital: 1-2 dias √∫teis\n"
        resposta += "‚Ä¢ Interior: 2-4 dias √∫teis\n"
        resposta += "‚Ä¢ Outros estados: 3-7 dias √∫teis\n\n"
        resposta += "Deseja enviar uma encomenda agora?"
        
        return resposta
    
    def gerar_resposta_contato(self, session_id):
        """Gera resposta solicitando contato"""
        if session_id not in self.contexto:
            self.contexto[session_id] = {}
        
        contexto = self.contexto[session_id]
        
        if 'nome' not in contexto:
            return ("Para conectar voc√™ com um atendente, preciso de algumas informa√ß√µes.\n\n"
                   "Por favor, me informe seu **nome completo**:")
        elif 'telefone' not in contexto:
            return (f"Obrigado, {contexto['nome']}!\n\n"
                   "Agora preciso do seu **telefone** para contato (com DDD):")
        elif 'email' not in contexto:
            return ("Por √∫ltimo, qual seu **e-mail**?\n"
                   "(Usaremos para enviar o protocolo de atendimento)")
        else:
            resposta = f"‚úÖ **Dados registrados com sucesso!**\n\n"
            resposta += f"**Nome:** {contexto['nome']}\n"
            resposta += f"**Telefone:** {contexto['telefone']}\n"
            resposta += f"**E-mail:** {contexto['email']}\n\n"
            resposta += "üé´ **Protocolo:** #" + datetime.now().strftime("%Y%m%d%H%M%S") + "\n\n"
            resposta += "Um atendente entrar√° em contato em at√© 30 minutos.\n"
            resposta += "Hor√°rio de atendimento: Segunda a Sexta, 8h √†s 18h\n\n"
            resposta += "Enquanto isso, posso ajudar com mais alguma informa√ß√£o?"
            
            # Limpar contexto ap√≥s coletar todos os dados
            self.contexto[session_id] = {}
            
            return resposta
    
    def processar_mensagem(self, mensagem, session_id):
        """Processa a mensagem e retorna uma resposta apropriada"""
        if session_id not in self.contexto:
            self.contexto[session_id] = {}
        
        contexto = self.contexto[session_id]
        
        # Extrair dados pessoais se houver
        dados_extraidos = self.extrair_dados_pessoais(mensagem)
        
        # Se estamos coletando dados para contato
        if 'coletando_contato' in contexto and contexto['coletando_contato']:
            if 'nome' not in contexto:
                # Assumir que a mensagem √© o nome se n√£o for email ou telefone
                if not dados_extraidos:
                    contexto['nome'] = mensagem.strip()
                    return self.gerar_resposta_contato(session_id)
            
            if dados_extraidos.get('telefone'):
                contexto['telefone'] = dados_extraidos['telefone']
            elif dados_extraidos.get('email'):
                contexto['email'] = dados_extraidos['email']
            
            return self.gerar_resposta_contato(session_id)
        
        # Detectar inten√ß√£o
        intencao = self.detectar_intencao(mensagem)
        
        # Gerar resposta baseada na inten√ß√£o
        if intencao == 'servicos_geral':
            return self.gerar_resposta_servicos()
        elif intencao == 'passagem':
            return self.gerar_resposta_passagem()
        elif intencao == 'encomenda':
            return self.gerar_resposta_encomenda()
        elif intencao == 'guarda_volumes':
            resposta = "üéí **Guarda-Volumes**\n\n"
            resposta += "**Tamanhos e pre√ßos:**\n"
            resposta += "‚Ä¢ Pequeno (mochila): R$ 10/dia\n"
            resposta += "‚Ä¢ M√©dio (mala m√©dia): R$ 15/dia\n"
            resposta += "‚Ä¢ Grande (mala grande): R$ 20/dia\n\n"
            resposta += "**Funcionamento:** 6h √†s 22h\n"
            resposta += "**Local:** Piso t√©rreo, pr√≥ximo aos guich√™s\n\n"
            resposta += "Deseja guardar algum volume?"
            return resposta
        elif intencao == 'alimentacao':
            resposta = "üçΩÔ∏è **Pra√ßa de Alimenta√ß√£o**\n\n"
            resposta += "**Op√ß√µes dispon√≠veis:**\n"
            resposta += "‚Ä¢ McDonald's\n"
            resposta += "‚Ä¢ Subway\n"
            resposta += "‚Ä¢ Restaurante Mineiro\n"
            resposta += "‚Ä¢ Caf√© Expresso\n"
            resposta += "‚Ä¢ Padaria P√£o de A√ß√∫car\n\n"
            resposta += "**Hor√°rio:** 6h √†s 23h\n"
            resposta += "**Local:** 2¬∫ andar\n\n"
            resposta += "Tamb√©m temos op√ß√µes veganas e sem gl√∫ten!"
            return resposta
        elif intencao == 'horario':
            resposta = "üïê **Hor√°rios de Funcionamento**\n\n"
            for local, horario in HORARIOS_FUNCIONAMENTO.items():
                resposta += f"**{local.replace('_', ' ').title()}:** {horario}\n"
            resposta += "\nPrecisa de informa√ß√µes sobre algum servi√ßo espec√≠fico?"
            return resposta
        elif intencao == 'contato':
            contexto['coletando_contato'] = True
            return self.gerar_resposta_contato(session_id)
        else:
            # Resposta padr√£o amig√°vel
            resposta = "Ol√°! Sou o assistente virtual do Terminal Rodovi√°rio. üòä\n\n"
            resposta += "Posso ajudar com:\n"
            resposta += "‚Ä¢ Informa√ß√µes sobre nossos servi√ßos\n"
            resposta += "‚Ä¢ Compra de passagens\n"
            resposta += "‚Ä¢ Envio de encomendas\n"
            resposta += "‚Ä¢ Guarda-volumes\n"
            resposta += "‚Ä¢ Pra√ßa de alimenta√ß√£o\n"
            resposta += "‚Ä¢ Hor√°rios de funcionamento\n\n"
            resposta += "Como posso ajudar voc√™ hoje?"
            return resposta

# Inst√¢ncia global do chatbot
chatbot = ChatBot()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    mensagem = data.get('message', '')
    session_id = data.get('session_id', 'default')
    
    # Processar mensagem
    resposta = chatbot.processar_mensagem(mensagem, session_id)
    
    # Armazenar conversa
    if session_id not in conversations:
        conversations[session_id] = []
    
    conversations[session_id].append({
        'timestamp': datetime.now().isoformat(),
        'user': mensagem,
        'bot': resposta
    })
    
    return jsonify({
        'response': resposta,
        'session_id': session_id
    })

@app.route('/reset', methods=['POST'])
def reset():
    data = request.json
    session_id = data.get('session_id', 'default')
    
    if session_id in conversations:
        del conversations[session_id]
    if session_id in chatbot.contexto:
        del chatbot.contexto[session_id]
    
    return jsonify({'status': 'success', 'message': 'Conversa reiniciada'})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)